DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS friends CASCADE;
DROP TABLE IF EXISTS films_genres CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS events CASCADE;
DROP TYPE IF EXISTS enum_event_type;
DROP TYPE IF EXISTS enum_event_operation;

create table if not exists users (
    id int generated by default as identity primary key,
    email varchar(50),
    login varchar(200),
    name varchar(50),
    birthday timestamp
);

create table if not exists mpa (
    id int generated by default as identity primary key,
    name varchar(50)
);

create table if not exists genres (
    id int generated by default as identity primary key,
    name varchar(50)
);

create table if not exists films (
    id int generated by default as identity primary key,
    name varchar(50),
    description varchar(200),
    release_date timestamp,
    duration int,
    rate int,
    mpa_id int,
    CONSTRAINT fk_films_mpa
        FOREIGN KEY (mpa_id)
            REFERENCES mpa (id)
);

create table if not exists films_genres (
    film_id int REFERENCES films(id),
    genre_id int REFERENCES genres(id)
);

create table if not exists friends (
    user_id int REFERENCES users(id),
    friend_id int REFERENCES users(id)
);

create table if not exists likes (
    film_id int REFERENCES films(id),
    user_id int REFERENCES users(id)
);

create type if not exists enum_event_type AS enum ('LIKE', 'REVIEW', 'FRIEND');
create type if not exists enum_event_operation as enum ('REMOVE', 'ADD', 'UPDATE');

create table if not exists events (
    id int generated by default as identity primary key,
    type enum_event_type,
    operation enum_event_operation,
    entity_id int,
    user_id int,
    CONSTRAINT fk_events_user
            FOREIGN KEY (user_id)
                REFERENCES users (id)
);
