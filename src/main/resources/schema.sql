DROP TABLE IF EXISTS likes CASCADE;
DROP TABLE IF EXISTS friends CASCADE;
DROP TABLE IF EXISTS films_genres CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa CASCADE;
DROP TABLE IF EXISTS users CASCADE;
DROP TABLE IF EXISTS director_film CASCADE;
DROP TABLE IF EXISTS directors CASCADE;
DROP TABLE IF EXISTS films CASCADE;


create table if not exists users (
    id int generated by default as identity primary key,
    email varchar(50),
    login varchar(200),
    name varchar(50),
    birthday timestamp
);

create table if not exists mpa (
    id int generated by default as identity primary key,
    name varchar(50)
);

create table if not exists genres (
    id int generated by default as identity primary key,
    name varchar(50)
);

create table if not exists films (
    id int generated by default as identity primary key,
    name varchar(50),
    description varchar(200),
    release_date timestamp,
    duration int,
    rate int,
    mpa_id int REFERENCES mpa (id),
    CONSTRAINT fk_films_mpa
    FOREIGN KEY (mpa_id)
    REFERENCES mpa (id)
);

create table if not exists films_genres (
    film_id int REFERENCES films(id),
    genre_id int REFERENCES genres(id)
);

create table if not exists friends (
    user_id int REFERENCES users(id),
    friend_id int REFERENCES users(id)
);

create table if not exists likes (
    film_id int REFERENCES films(id),
    user_id int REFERENCES users(id)
);

create table if not exists directors (
    id int generated by default as identity primary key,
    name varchar(50)
    );

create table if not exists director_film (
    director_id int REFERENCES directors (id)
    on delete cascade
    on update cascade,
    film_id int REFERENCES films (id)
    on delete cascade
    on update cascade,
    PRIMARY KEY (director_id, film_id)
    );

